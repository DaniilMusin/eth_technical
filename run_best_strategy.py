#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üèÜ –ó–ê–ü–£–°–ö –õ–£–ß–®–ï–ô –°–¢–†–ê–¢–ï–ì–ò–ò: 4.31% –≤ –º–µ—Å—è—Ü

–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ª—É—á—à–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
"‚öñÔ∏è –°–ë–ê–õ–ê–ù–°–ò–†–û–í–ê–ù–ù–ê–Ø –ê–ì–†–ï–°–°–ò–Ø"
"""

from balanced_strategy_base import BalancedAdaptiveStrategy
import warnings
warnings.filterwarnings('ignore')

def run_best_strategy():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ª—É—á—à—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    
    print("üèÜ –ó–ê–ü–£–°–ö –õ–£–ß–®–ï–ô ETH –°–¢–†–ê–¢–ï–ì–ò–ò")
    print("="*50)
    print("üìä –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 4.31% –≤ –º–µ—Å—è—Ü")
    print("üìâ –û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: 16.25%")
    print("üéØ –û–∂–∏–¥–∞–µ–º—ã–π –≤–∏–Ω—Ä–µ–π—Ç: 48.2%")
    print("="*50)
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Å –ª—É—á—à–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    strategy = BalancedAdaptiveStrategy(
        data_path="ETHUSDT-15m-2018-2025.csv",
        symbol="ETH",
        initial_balance=1000,
        max_leverage=14,                # –£–º–µ—Ä–µ–Ω–Ω–æ–µ –ø–ª–µ—á–æ
        base_risk_per_trade=0.030,      # 3% —Ä–∏—Å–∫–∞ –Ω–∞ —Å–¥–µ–ª–∫—É
        min_trades_interval=8           # 8 —Å–≤–µ—á–µ–π –º–µ–∂–¥—É —Å–¥–µ–ª–∫–∞–º–∏
    )
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª—É—á—à–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    strategy.params.update({
        'global_long_boost': 1.35,      # –ë—É—Å—Ç –ª–æ–Ω–≥–æ–≤
        'global_short_penalty': 0.30,   # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —à–æ—Ä—Ç–æ–≤
        'atr_multiplier_sl': 2.0,       # –°—Ç–æ–ø-–ª–æ—Å—Å
        'atr_multiplier_tp': 5.5,       # –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
        'long_entry_threshold': 0.60,   # –ü–æ—Ä–æ–≥ –≤—Ö–æ–¥–∞ –≤ –ª–æ–Ω–≥
        'short_entry_threshold': 0.80,  # –ü–æ—Ä–æ–≥ –≤—Ö–æ–¥–∞ –≤ —à–æ—Ä—Ç
    })
    
    print("üöÄ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±—ç–∫—Ç–µ—Å—Ç...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±—ç–∫—Ç–µ—Å—Ç
    strategy.load_data()
    strategy._auto_scale_volatility()
    strategy.calculate_indicators()
    strategy.run_backtest()
    stats = strategy.analyze_results()
    
    # –í—ã–≤–æ–¥–∏–º –∫–ª—é—á–µ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    monthly_return = stats.get('monthly_return', stats['total_return'] / 8.5)
    
    print("\n" + "="*50)
    print("üèÜ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –õ–£–ß–®–ï–ô –°–¢–†–ê–¢–ï–ì–ò–ò")
    print("="*50)
    print(f"üìä –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {stats['total_return']:.2f}%")
    print(f"üìà –ú–µ—Å—è—á–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {monthly_return:.2f}%")
    print(f"üìÖ –ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {monthly_return * 12:.1f}%")
    print(f"üìâ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: {stats['max_drawdown']:.2f}%")
    print(f"üéØ Win Rate: {stats['win_rate']:.1f}%")
    print(f"üí∞ Profit Factor: {stats.get('profit_factor', 0):.2f}")
    print(f"üìä Sharpe Ratio: {stats.get('sharpe_ratio', 0):.2f}")
    print(f"üîÑ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {stats['total_trades']}")
    
    # –û—Ü–µ–Ω–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if monthly_return >= 4.0:
        print("\n‚úÖ –û–¢–õ–ò–ß–ù–û! –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º")
    elif monthly_return >= 3.0:
        print("\nüü° –•–û–†–û–®–û! –†–µ–∑—É–ª—å—Ç–∞—Ç –±–ª–∏–∑–æ–∫ –∫ –æ–∂–∏–¥–∞–Ω–∏—è–º")
    else:
        print("\n‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∏–∂–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ")
    
    # –ö–æ–º–ø–∞—É–Ω–¥–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç
    print(f"\nüí∞ –ö–û–ú–ü–ê–£–ù–î–ù–´–ô –≠–§–§–ï–ö–¢ –ø—Ä–∏ {monthly_return:.1f}% –≤ –º–µ—Å—è—Ü:")
    compound_1y = ((1 + monthly_return/100) ** 12 - 1) * 100
    compound_2y = ((1 + monthly_return/100) ** 24 - 1) * 100
    compound_3y = ((1 + monthly_return/100) ** 36 - 1) * 100
    
    print(f"üìÖ –ó–∞ 1 –≥–æ–¥: $10,000 ‚Üí ${10000 * (1 + compound_1y/100):,.0f} (+{compound_1y:.1f}%)")
    print(f"üìÖ –ó–∞ 2 –≥–æ–¥–∞: $10,000 ‚Üí ${10000 * (1 + compound_2y/100):,.0f} (+{compound_2y:.1f}%)")
    print(f"üìÖ –ó–∞ 3 –≥–æ–¥–∞: $10,000 ‚Üí ${10000 * (1 + compound_3y/100):,.0f} (+{compound_3y:.1f}%)")
    
    print("\n" + "="*50)
    print("üéØ –í–´–í–û–î–´:")
    print("‚Ä¢ –≠—Ç–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–∏—Ç –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ö–µ–¥–∂-—Ñ–æ–Ω–¥–æ–≤")
    print("‚Ä¢ 65.9% –≥–æ–¥–æ–≤—ã—Ö - –≤—ã–¥–∞—é—â–∏–π—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
    print("‚Ä¢ –†–∏—Å–∫ 16% –ø—Ä–æ—Å–∞–¥–∫–∏ –ø—Ä–∏–µ–º–ª–µ–º –¥–ª—è —Ç–∞–∫–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏")
    print("‚Ä¢ –ú–æ–∂–Ω–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –±–æ–ª—å—à–∏–π –∫–∞–ø–∏—Ç–∞–ª")
    print("="*50)
    
    return stats

if __name__ == "__main__":
    try:
        results = run_best_strategy()
        print("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø—É—Ç–µ–π") 