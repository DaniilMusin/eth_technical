#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üîç –î–ï–ú–û Walk Forward –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–±—ã—Å—Ç—Ä–∞—è –≤–µ—Ä—Å–∏—è)
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–∏–Ω—Ü–∏–ø–∞ —Ä–∞–±–æ—Ç—ã
"""

import pandas as pd
import numpy as np
import os
import sys
import warnings
import json
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

warnings.filterwarnings('ignore')

def load_data(file_path):
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ"""
    print("üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...")
    
    df = pd.read_csv(file_path)
    
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
    rename_map = {
        "open_time": "Open time",
        "open": "Open",
        "high": "High", 
        "low": "Low",
        "close": "Close",
        "volume": "Volume"
    }
    df.rename(columns=rename_map, inplace=True)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
    if df["Open time"].dtype.kind in "iu":
        df["Open time"] = pd.to_datetime(df["Open time"], unit="ms", errors="coerce")
    else:
        df["Open time"] = pd.to_datetime(df["Open time"], errors="coerce")
    
    df.dropna(subset=["Open time"], inplace=True)
    df.set_index("Open time", inplace=True)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—ã –≤ —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç
    for col in ["Open", "High", "Low", "Close", "Volume"]:
        df[col] = pd.to_numeric(df[col], errors="coerce")
    
    df.dropna(inplace=True)
    df.sort_index(inplace=True)
    
    print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã: {len(df):,} –∑–∞–ø–∏—Å–µ–π")
    print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {df.index[0]} - {df.index[-1]}")
    return df

def create_simple_periods(data, train_months=3, test_months=1):
    """–°–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    periods = []
    
    start_date = data.index[0]
    end_date = data.index[-1]
    
    current_date = start_date
    period_id = 1
    
    # –°–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–∏–æ–¥–æ–≤ –¥–ª—è –¥–µ–º–æ
    max_periods = 5  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –¥–µ–º–æ
    
    while period_id <= max_periods:
        # –ü–µ—Ä–∏–æ–¥ –æ–±—É—á–µ–Ω–∏—è
        train_start = current_date
        train_end = train_start + pd.DateOffset(months=train_months)
        
        # –ü–µ—Ä–∏–æ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è  
        test_start = train_end
        test_end = test_start + pd.DateOffset(months=test_months)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
        if test_end > end_date:
            break
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –∫–∞–∂–¥–æ–º –ø–µ—Ä–∏–æ–¥–µ
        train_data = data[train_start:train_end]
        test_data = data[test_start:test_end] 
        
        if len(train_data) < 1000 or len(test_data) < 100:
            current_date = current_date + pd.DateOffset(months=test_months)
            period_id += 1
            continue
        
        periods.append({
            'id': period_id,
            'train_start': train_start,
            'train_end': train_end,
            'test_start': test_start,
            'test_end': test_end,
            'train_records': len(train_data),
            'test_records': len(test_data)
        })
        
        # –°–¥–≤–∏–≥–∞–µ–º –æ–∫–Ω–æ
        current_date = current_date + pd.DateOffset(months=test_months)
        period_id += 1
    
    return periods

def simple_strategy_test(data):
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    # –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö
    data = data.copy()
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    data['MA_Short'] = data['Close'].rolling(window=10).mean()
    data['MA_Long'] = data['Close'].rolling(window=30).mean()
    data['RSI'] = calculate_simple_rsi(data['Close'], 14)
    
    # –°–∏–≥–Ω–∞–ª—ã
    data['Long_Signal'] = (data['MA_Short'] > data['MA_Long']) & (data['RSI'] < 70)
    data['Short_Signal'] = (data['MA_Short'] < data['MA_Long']) & (data['RSI'] > 30)
    
    # –°–∏–º—É–ª—è—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏
    balance = 10000
    position = 0
    trades = []
    
    for i in range(len(data)):
        if data['Long_Signal'].iloc[i] and position <= 0:
            if position < 0:
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º —à–æ—Ä—Ç
                pnl = (data['Close'].iloc[i-1] - data['Close'].iloc[i]) / data['Close'].iloc[i-1] * abs(position)
                balance += pnl
                trades.append({'type': 'close_short', 'pnl': pnl})
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ª–æ–Ω–≥
            position = balance * 0.1  # 10% –æ—Ç –±–∞–ª–∞–Ω—Å–∞
            entry_price = data['Close'].iloc[i]
            trades.append({'type': 'open_long', 'price': entry_price})
            
        elif data['Short_Signal'].iloc[i] and position >= 0:
            if position > 0:
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ª–æ–Ω–≥
                pnl = (data['Close'].iloc[i] - entry_price) / entry_price * position
                balance += pnl
                trades.append({'type': 'close_long', 'pnl': pnl})
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —à–æ—Ä—Ç
            position = -balance * 0.1  # 10% –æ—Ç –±–∞–ª–∞–Ω—Å–∞
            entry_price = data['Close'].iloc[i]
            trades.append({'type': 'open_short', 'price': entry_price})
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã
    total_return = (balance - 10000) / 10000 * 100
    profitable_trades = [t for t in trades if 'pnl' in t and t['pnl'] > 0]
    win_rate = len(profitable_trades) / max(len([t for t in trades if 'pnl' in t]), 1) * 100
    
    return {
        'total_return': total_return,
        'final_balance': balance,
        'total_trades': len([t for t in trades if 'pnl' in t]),
        'win_rate': win_rate,
        'max_drawdown': min(0, min([t.get('pnl', 0) for t in trades], default=0)) / 100
    }

def calculate_simple_rsi(prices, period):
    """–ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç RSI"""
    delta = prices.diff()
    gain = (delta.where(delta > 0, 0)).rolling(window=period).mean()
    loss = (-delta.where(delta < 0, 0)).rolling(window=period).mean()
    rs = gain / loss
    rsi = 100 - (100 / (1 + rs))
    return rsi.fillna(50)

def run_demo_walk_forward():
    """–ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ walk forward —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –î–ï–ú–û WALK FORWARD –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("="*50)
    print("üìä –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–∏–Ω—Ü–∏–ø–∞")
    print("="*50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö
    data_path = "../ETHUSDT-15m-2018-2025.csv"
    
    if not os.path.exists(data_path):
        print(f"‚ùå –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω: {data_path}")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data = load_data(data_path)
    
    # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–∏–æ–¥—ã (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ)
    periods = create_simple_periods(data, train_months=3, test_months=1)
    
    print(f"\nüîÑ –°–æ–∑–¥–∞–Ω–æ {len(periods)} –ø–µ—Ä–∏–æ–¥–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏")
    
    results = []
    
    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É –ø–µ—Ä–∏–æ–¥—É
    for period in periods:
        print(f"\nüìÖ –ü–ï–†–ò–û–î {period['id']}")
        print(f"üîÑ –û–±—É—á–µ–Ω–∏–µ: {period['train_start'].strftime('%Y-%m-%d')} - {period['train_end'].strftime('%Y-%m-%d')}")
        print(f"üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {period['test_start'].strftime('%Y-%m-%d')} - {period['test_end'].strftime('%Y-%m-%d')}")
        print(f"üìà –î–∞–Ω–Ω—ã–µ: {period['train_records']:,} –æ–±—É—á–µ–Ω–∏–µ, {period['test_records']:,} —Ç–µ—Å—Ç")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞
        train_data = data[period['train_start']:period['train_end']]
        test_data = data[period['test_start']:period['test_end']]
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–º walk forward –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–∞ train_data
        # –î–ª—è –¥–µ–º–æ –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        print("üîß (–í —Ä–µ–∞–ª—å–Ω–æ–º —Ç–µ—Å—Ç–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ forward –¥–∞–Ω–Ω—ã—Ö
        result = simple_strategy_test(test_data)
        
        result['period_id'] = period['id']
        result['test_start'] = period['test_start'].strftime('%Y-%m-%d')
        result['test_end'] = period['test_end'].strftime('%Y-%m-%d')
        
        results.append(result)
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–∏–æ–¥–∞
        print(f"üí∞ –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {result['total_return']:.2f}%")
        print(f"üéØ Win Rate: {result['win_rate']:.1f}%")
        print(f"üîÑ –°–¥–µ–ª–æ–∫: {result['total_trades']}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"\n" + "="*50)
    print("üìä –û–ë–©–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ï–ú–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("="*50)
    
    monthly_returns = [r['total_return'] for r in results]
    
    avg_return = np.mean(monthly_returns)
    std_return = np.std(monthly_returns) 
    win_rate_avg = np.mean([r['win_rate'] for r in results])
    profitable_periods = len([r for r in monthly_returns if r > 0])
    
    print(f"üìä –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–µ—Ä–∏–æ–¥–æ–≤: {len(results)}")
    print(f"üìà –°—Ä–µ–¥–Ω—è—è –º–µ—Å—è—á–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {avg_return:.2f}%")
    print(f"üìà –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏: {std_return:.2f}%")
    print(f"üéØ –°—Ä–µ–¥–Ω–∏–π Win Rate: {win_rate_avg:.1f}%")
    print(f"‚úÖ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤: {profitable_periods} ({profitable_periods/len(results)*100:.1f}%)")
    
    # –ì–æ–¥–æ–≤–∞—è –ø—Ä–æ–µ–∫—Ü–∏—è
    annual_return = avg_return * 12
    print(f"\nüìÖ –ü–†–û–ï–ö–¶–ò–Ø –ù–ê –ì–û–î:")
    print(f"üìà –û–∂–∏–¥–∞–µ–º–∞—è –≥–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {annual_return:.1f}%")
    
    if avg_return > 0:
        print(f"‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!")
    else:
        print(f"‚ùå –°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–µ–º–æ
    with open('demo_results.json', 'w') as f:
        json.dump(results, f, indent=2, default=str)
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–µ–º–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ demo_results.json")
    print(f"\nüí° –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è. –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
    print(f"   python run_walk_forward.py")

if __name__ == "__main__":
    run_demo_walk_forward()