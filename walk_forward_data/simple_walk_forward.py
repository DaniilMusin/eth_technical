#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üöÄ –†–ï–ê–õ–¨–ù–û–ï WALK FORWARD –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å –Ω–∞—Å—Ç–æ—è—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ ETH
"""

import pandas as pd
import numpy as np
import json
from datetime import datetime, timedelta
import warnings
warnings.filterwarnings('ignore')

class SimpleWalkForwardTester:
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ walk forward —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self, data_path, train_months=6, test_months=1, initial_balance=10000):
        self.data_path = data_path
        self.train_months = train_months
        self.test_months = test_months
        self.initial_balance = initial_balance
        self.results = []
        
    def load_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ"""
        print("üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...")
        
        df = pd.read_csv(self.data_path)
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
        rename_map = {
            "open_time": "timestamp",
            "open": "open",
            "high": "high", 
            "low": "low",
            "close": "close",
            "volume": "volume"
        }
        df.rename(columns=rename_map, inplace=True)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
        if df["timestamp"].dtype.kind in "iu":
            if df["timestamp"].max() < 1e12:
                # Likely seconds
                df["timestamp"] = pd.to_datetime(df["timestamp"], unit="s", errors="coerce")
            else:
                df["timestamp"] = pd.to_datetime(df["timestamp"], unit="ms", errors="coerce")
        else:
            df["timestamp"] = pd.to_datetime(df["timestamp"], errors="coerce")
        
        df.dropna(subset=["timestamp"], inplace=True)
        df.set_index("timestamp", inplace=True)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—ã –≤ —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç
        for col in ["open", "high", "low", "close", "volume"]:
            df[col] = pd.to_numeric(df[col], errors="coerce")
        
        df.dropna(inplace=True)
        df.sort_index(inplace=True)
        
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(df):,} –∑–∞–ø–∏—Å–µ–π")
        print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {df.index[0]} - {df.index[-1]}")
        
        self.data = df
        return df
    
    def calculate_simple_indicators(self, data):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã"""
        df = data.copy()
        
        # –°–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ
        df['sma_fast'] = df['close'].rolling(window=8).mean()
        df['sma_slow'] = df['close'].rolling(window=25).mean()
        
        # EMA
        df['ema_fast'] = df['close'].ewm(span=8).mean()
        df['ema_slow'] = df['close'].ewm(span=25).mean()
        
        # RSI (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
        delta = df['close'].diff()
        gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
        loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
        rs = gain / loss
        df['rsi'] = 100 - (100 / (1 + rs))
        
        # Bollinger Bands
        df['bb_middle'] = df['close'].rolling(window=20).mean()
        bb_std = df['close'].rolling(window=20).std()
        df['bb_upper'] = df['bb_middle'] + (bb_std * 2)
        df['bb_lower'] = df['bb_middle'] - (bb_std * 2)
        
        # Volatility (ATR —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
        high_low = df['high'] - df['low']
        high_close = np.abs(df['high'] - df['close'].shift())
        low_close = np.abs(df['low'] - df['close'].shift())
        ranges = pd.concat([high_low, high_close, low_close], axis=1)
        true_range = ranges.max(axis=1)
        df['atr'] = true_range.rolling(14).mean()
        
        # –û–±—ä–µ–º
        df['volume_sma'] = df['volume'].rolling(window=20).mean()
        df['volume_ratio'] = df['volume'] / df['volume_sma']
        
        return df
    
    def generate_signals(self, data):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã"""
        df = data.copy()
        
        # –£—Å–ª–æ–≤–∏—è –¥–ª—è –ª–æ–Ω–≥–∞
        long_conditions = (
            (df['ema_fast'] > df['ema_slow']) &  # –í–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥
            (df['rsi'] < 70) &  # –ù–µ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω
            (df['close'] > df['bb_lower']) &  # –í—ã—à–µ –Ω–∏–∂–Ω–µ–π –ø–æ–ª–æ—Å—ã
            (df['volume_ratio'] > 1.1)  # –ü–æ–≤—ã—à–µ–Ω–Ω—ã–π –æ–±—ä–µ–º
        )
        
        # –£—Å–ª–æ–≤–∏—è –¥–ª—è —à–æ—Ä—Ç–∞  
        short_conditions = (
            (df['ema_fast'] < df['ema_slow']) &  # –ù–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥
            (df['rsi'] > 30) &  # –ù–µ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω
            (df['close'] < df['bb_upper']) &  # –ù–∏–∂–µ –≤–µ—Ä—Ö–Ω–µ–π –ø–æ–ª–æ—Å—ã
            (df['volume_ratio'] > 1.1)  # –ü–æ–≤—ã—à–µ–Ω–Ω—ã–π –æ–±—ä–µ–º
        )
        
        df['long_signal'] = long_conditions
        df['short_signal'] = short_conditions
        
        return df
    
    def run_strategy_backtest(self, data):
        """–ó–∞–ø—É—Å–∫–∞–µ–º –±—ç–∫—Ç–µ—Å—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞ –¥–∞–Ω–Ω—ã—Ö"""
        df = self.calculate_simple_indicators(data)
        df = self.generate_signals(df)
        
        # –£–±–∏—Ä–∞–µ–º NaN
        df = df.dropna()
        
        if len(df) < 100:
            return self.get_empty_result()
        
        # –¢–æ—Ä–≥–æ–≤–∞—è —Å–∏–º—É–ª—è—Ü–∏—è
        balance = self.initial_balance
        position = 0
        entry_price = 0
        trades = []
        equity_curve = []
        max_equity = balance
        max_drawdown = 0
        
        for i in range(len(df)):
            current_price = df['close'].iloc[i]
            equity = balance + (position * (current_price - entry_price) if position != 0 else 0)
            equity_curve.append(equity)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø—Ä–æ—Å–∞–¥–∫—É
            if equity > max_equity:
                max_equity = equity
            current_drawdown = (max_equity - equity) / max_equity * 100
            if current_drawdown > max_drawdown:
                max_drawdown = current_drawdown
            
            # –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π –ø–æ —Å—Ç–æ–ø-–ª–æ—Å—Å—É/—Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—É
            if position != 0:
                atr = df['atr'].iloc[i]
                if position > 0:  # –õ–æ–Ω–≥
                    stop_loss = entry_price - (atr * 2.0)
                    take_profit = entry_price + (atr * 5.0)
                    
                    if current_price <= stop_loss or current_price >= take_profit:
                        pnl = (current_price - entry_price) / entry_price * 100
                        balance = balance + (position * (current_price - entry_price))
                        trades.append({'type': 'close_long', 'pnl': pnl, 'price': current_price})
                        position = 0
                        entry_price = 0
                        
                elif position < 0:  # –®–æ—Ä—Ç
                    stop_loss = entry_price + (atr * 2.0)
                    take_profit = entry_price - (atr * 5.0)
                    
                    if current_price >= stop_loss or current_price <= take_profit:
                        pnl = (entry_price - current_price) / entry_price * 100
                        balance = balance + (abs(position) * (entry_price - current_price))
                        trades.append({'type': 'close_short', 'pnl': pnl, 'price': current_price})
                        position = 0
                        entry_price = 0
            
            # –ù–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
            if position == 0:  # –ù–µ—Ç –ø–æ–∑–∏—Ü–∏–∏
                risk_amount = balance * 0.02  # 2% —Ä–∏—Å–∫–∞
                
                if df['long_signal'].iloc[i]:
                    atr = df['atr'].iloc[i]
                    stop_distance = atr * 2.0
                    position_size = risk_amount / stop_distance
                    position = position_size
                    entry_price = current_price
                    trades.append({'type': 'open_long', 'price': current_price})
                    
                elif df['short_signal'].iloc[i]:
                    atr = df['atr'].iloc[i]
                    stop_distance = atr * 2.0
                    position_size = risk_amount / stop_distance
                    position = -position_size
                    entry_price = current_price
                    trades.append({'type': 'open_short', 'price': current_price})
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
        if position != 0:
            final_price = df['close'].iloc[-1]
            if position > 0:
                pnl = (final_price - entry_price) / entry_price * 100
                balance = balance + (position * (final_price - entry_price))
            else:
                pnl = (entry_price - final_price) / entry_price * 100  
                balance = balance + (abs(position) * (entry_price - final_price))
            trades.append({'type': 'close_final', 'pnl': pnl, 'price': final_price})
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
        total_return = (balance - self.initial_balance) / self.initial_balance * 100
        
        pnl_trades = [t for t in trades if 'pnl' in t]
        if pnl_trades:
            winning_trades = [t for t in pnl_trades if t['pnl'] > 0]
            win_rate = len(winning_trades) / len(pnl_trades) * 100
            if len(winning_trades) > 0 and len(pnl_trades) > len(winning_trades):
                avg_win = np.mean([t['pnl'] for t in winning_trades])
                avg_loss = np.mean([t['pnl'] for t in pnl_trades if t['pnl'] <= 0])
                if avg_loss == 0:
                    profit_factor = 1.0 if total_return > 0 else 0.5
                else:
                    profit_factor = abs(avg_win * len(winning_trades)) / abs(avg_loss * (len(pnl_trades) - len(winning_trades)))
            else:
                profit_factor = 1.0 if total_return > 0 else 0.5
        else:
            win_rate = 0
            profit_factor = 0
        
        return {
            'total_return': total_return,
            'max_drawdown': max_drawdown,
            'win_rate': win_rate,
            'total_trades': len(pnl_trades),
            'profit_factor': profit_factor,
            'final_balance': balance
        }
    
    def get_empty_result(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø–µ—Ä–∏–æ–¥–æ–≤ —Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        return {
            'total_return': 0,
            'max_drawdown': 0,
            'win_rate': 0,
            'total_trades': 0,
            'profit_factor': 0,
            'final_balance': self.initial_balance
        }
    
    def create_periods(self):
        """–°–æ–∑–¥–∞–µ–º –ø–µ—Ä–∏–æ–¥—ã –¥–ª—è walk forward —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        periods = []
        start_date = self.data.index[0]
        end_date = self.data.index[-1]
        
        current_date = start_date
        period_id = 1
        
        while True:
            # –ü–µ—Ä–∏–æ–¥ –æ–±—É—á–µ–Ω–∏—è (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)
            train_start = current_date
            train_end = train_start + pd.DateOffset(months=self.train_months)
            
            # –ü–µ—Ä–∏–æ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            test_start = train_end
            test_end = test_start + pd.DateOffset(months=self.test_months)
            
            if test_end > end_date:
                break
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
            test_data = self.data[test_start:test_end]
            
            if len(test_data) < 100:
                current_date = current_date + pd.DateOffset(months=self.test_months)
                period_id += 1
                continue
            
            periods.append({
                'id': period_id,
                'train_start': train_start,
                'train_end': train_end,
                'test_start': test_start,
                'test_end': test_end,
                'test_records': len(test_data)
            })
            
            current_date = current_date + pd.DateOffset(months=self.test_months)
            period_id += 1
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–∏–æ–¥–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            if len(periods) >= 20:
                break
        
        return periods
    
    def run_walk_forward_test(self):
        """–ó–∞–ø—É—Å–∫ walk forward —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("\nüöÄ –ó–ê–ü–£–°–ö –†–ï–ê–õ–¨–ù–û–ì–û WALK FORWARD –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("="*60)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        self.load_data()
        
        # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–∏–æ–¥—ã
        periods = self.create_periods()
        print(f"üîÑ –°–æ–∑–¥–∞–Ω–æ {len(periods)} –ø–µ—Ä–∏–æ–¥–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        print(f"\nüìÖ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û –ü–ï–†–ò–û–î–ê–ú:")
        print("-" * 80)
        print(f"{'Period':<6} {'Test Start':<12} {'Test End':<12} {'Return %':<10} {'Drawdown %':<12} {'Win Rate %':<12} {'Trades':<7}")
        print("-" * 80)
        
        for period in periods:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            test_data = self.data[period['test_start']:period['test_end']]
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é (–±–µ–∑ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è)
            result = self.run_strategy_backtest(test_data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            period_result = {
                'period_id': period['id'],
                'test_start': period['test_start'].strftime('%Y-%m-%d'),
                'test_end': period['test_end'].strftime('%Y-%m-%d'),
                'test_records': period['test_records'],
                **result
            }
            
            self.results.append(period_result)
            
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            print(f"{period['id']:<6} {period['test_start'].strftime('%Y-%m-%d'):<12} {period['test_end'].strftime('%Y-%m-%d'):<12} "
                  f"{result['total_return']:>+7.2f} {result['max_drawdown']:>10.1f} {result['win_rate']:>10.1f} "
                  f"{result['total_trades']:>6}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.analyze_results()
        
        return self.results
    
    def analyze_results(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
        print(f"\n" + "="*60)
        print("üìä –û–ë–©–ò–ô –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
        print("="*60)
        
        if not self.results:
            print("‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return
        
        # –°–æ–±–∏—Ä–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
        returns = [r['total_return'] for r in self.results]
        drawdowns = [r['max_drawdown'] for r in self.results]
        win_rates = [r['win_rate'] for r in self.results]
        trades = [r['total_trades'] for r in self.results]
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        avg_return = np.mean(returns)
        std_return = np.std(returns)
        min_return = np.min(returns)
        max_return = np.max(returns)
        
        avg_drawdown = np.mean(drawdowns)
        max_drawdown = np.max(drawdowns)
        
        avg_win_rate = np.mean(win_rates)
        total_trades = np.sum(trades)
        
        profitable_periods = len([r for r in returns if r > 0])
        profitable_pct = profitable_periods / len(returns) * 100
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print(f"üìä –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–µ—Ä–∏–æ–¥–æ–≤: {len(self.results)}")
        print(f"üìà –°—Ä–µ–¥–Ω—è—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∑–∞ –ø–µ—Ä–∏–æ–¥: {avg_return:.2f}%")
        print(f"üìà –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏: {std_return:.2f}%")
        print(f"üìà –î–∏–∞–ø–∞–∑–æ–Ω –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏: {min_return:.2f}% - {max_return:.2f}%")
        print(f"üìâ –°—Ä–µ–¥–Ω—è—è –º–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞: {avg_drawdown:.2f}%")
        print(f"üìâ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: {max_drawdown:.2f}%")
        print(f"üéØ –°—Ä–µ–¥–Ω–∏–π Win Rate: {avg_win_rate:.1f}%")
        print(f"üîÑ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {total_trades}")
        print(f"‚úÖ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤: {profitable_periods} ({profitable_pct:.1f}%)")
        
        # –ú–µ—Å—è—á–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (–ø–µ—Ä–∏–æ–¥—ã –ø–æ 1 –º–µ—Å—è—Ü—É)
        monthly_return = avg_return
        annual_return = monthly_return * 12
        
        print(f"\nüìÖ –ü–†–û–ï–ö–¶–ò–Ø –ù–ê –ì–û–î:")
        print(f"üìà –û–∂–∏–¥–∞–µ–º–∞—è –≥–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {annual_return:.1f}%")
        
        # –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
        if avg_return != 0:
            consistency_score = profitable_pct * (1 - std_return / abs(avg_return))
        else:
            consistency_score = 0
            
        print(f"\nüéØ –û–¶–ï–ù–ö–ê –°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–ò:")
        print(f"üìä –ò–Ω–¥–µ–∫—Å —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏: {consistency_score:.1f}/100")
        
        if consistency_score > 70:
            assessment = "–û–¢–õ–ò–ß–ù–û"
            print("‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã—Å–æ–∫—É—é —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å")
        elif consistency_score > 50:
            assessment = "–•–û–†–û–®–û"
            print("üü° –°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–º–µ—Ä–µ–Ω–Ω—É—é —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å")
        else:
            assessment = "–¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò"
            print("‚ùå –°—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–∞")
        
        print(f"\nüéì –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê: {assessment}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        with open('real_walk_forward_results.json', 'w') as f:
            json.dump(self.results, f, indent=2, default=str)
        
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ real_walk_forward_results.json")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –†–ï–ê–õ–¨–ù–û–ï WALK FORWARD –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ETH –°–¢–†–ê–¢–ï–ì–ò–ò")
    print("="*60)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–µ—Ä
    tester = SimpleWalkForwardTester(
        data_path="../ETHUSDT-15m-2018-2025.csv",
        train_months=6,
        test_months=1,
        initial_balance=10000
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    results = tester.run_walk_forward_test()
    
    print(f"\n‚úÖ –†–µ–∞–ª—å–Ω–æ–µ walk forward —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print(f"üìä –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(results)} –ø–µ—Ä–∏–æ–¥–æ–≤ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ETH")

if __name__ == "__main__":
    main()