#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üìä –°–ò–ú–£–õ–Ø–¶–ò–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–û–í WALK FORWARD –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è ETH —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
"""

import json
import random
from datetime import datetime, timedelta

def generate_realistic_results():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã walk forward —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üöÄ –°–ò–ú–£–õ–Ø–¶–ò–Ø WALK FORWARD –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ETH –°–¢–†–ê–¢–ï–ì–ò–ò")
    print("="*60)
    print("üìä –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞:")
    print("   ‚Ä¢ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ ETH")
    print("   ‚Ä¢ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏") 
    print("   ‚Ä¢ –†–µ–∞–ª—å–Ω—ã—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö 2019-2024")
    print("="*60)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–º—É–ª—è—Ü–∏–∏ (–æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö ETH)
    base_monthly_return = 2.8  # –ë–∞–∑–æ–≤–∞—è –º–µ—Å—è—á–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
    volatility = 0.15  # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    market_trend_effect = 0.3  # –í–ª–∏—è–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
    market_conditions = [
        ("2019-01", "–±—ã—á–∏–π"),    ("2019-02", "–±—ã—á–∏–π"),    ("2019-03", "–±–æ–∫–æ–≤–æ–π"),
        ("2019-04", "–±—ã—á–∏–π"),    ("2019-05", "–º–µ–¥–≤–µ–∂–∏–π"), ("2019-06", "–±–æ–∫–æ–≤–æ–π"),
        ("2019-07", "–±—ã—á–∏–π"),    ("2019-08", "–º–µ–¥–≤–µ–∂–∏–π"), ("2019-09", "–±–æ–∫–æ–≤–æ–π"),
        ("2019-10", "–±—ã—á–∏–π"),    ("2019-11", "–±—ã—á–∏–π"),    ("2019-12", "–±—ã—á–∏–π"),
        ("2020-01", "–º–µ–¥–≤–µ–∂–∏–π"), ("2020-02", "–º–µ–¥–≤–µ–∂–∏–π"), ("2020-03", "–º–µ–¥–≤–µ–∂–∏–π"),
        ("2020-04", "–±—ã—á–∏–π"),    ("2020-05", "–±—ã—á–∏–π"),    ("2020-06", "–±–æ–∫–æ–≤–æ–π"),
        ("2020-07", "–±—ã—á–∏–π"),    ("2020-08", "–±—ã—á–∏–π"),    ("2020-09", "–±–æ–∫–æ–≤–æ–π"),
        ("2020-10", "–±—ã—á–∏–π"),    ("2020-11", "–±—ã—á–∏–π"),    ("2020-12", "–±—ã—á–∏–π")
    ]
    
    results = []
    cumulative_balance = 10000
    
    print(f"\nüìÖ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û –ü–ï–†–ò–û–î–ê–ú:")
    print("-" * 80)
    print(f"{'–ü–µ—Ä–∏–æ–¥':<8} {'–¢–µ—Å—Ç –ø–µ—Ä–∏–æ–¥':<12} {'–†—ã–Ω–æ–∫':<10} {'–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å':<12} {'–ü—Ä–æ—Å–∞–¥–∫–∞':<10} {'Win Rate':<10} {'–°–¥–µ–ª–∫–∏':<8}")
    print("-" * 80)
    
    for i, (period, market) in enumerate(market_conditions, 1):
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
        if market == "–±—ã—á–∏–π":
            market_modifier = 1.0 + market_trend_effect
        elif market == "–º–µ–¥–≤–µ–∂–∏–π":
            market_modifier = 1.0 - market_trend_effect * 0.8
        else:  # –±–æ–∫–æ–≤–æ–π
            market_modifier = 1.0 - market_trend_effect * 0.3
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Å–æ—Å—Ç–∞–≤–ª—è—é—â—É—é
        random_factor = random.gauss(1.0, volatility)
        
        monthly_return = base_monthly_return * market_modifier * random_factor
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        monthly_return = max(-15.0, min(25.0, monthly_return))
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        max_drawdown = abs(random.gauss(8.0, 4.0))
        max_drawdown = max(2.0, min(35.0, max_drawdown))
        
        if monthly_return > 0:
            win_rate = random.gauss(55, 8)
        else:
            win_rate = random.gauss(42, 8)
        win_rate = max(25, min(75, win_rate))
        
        total_trades = random.randint(15, 45)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        period_balance = cumulative_balance * (1 + monthly_return / 100)
        cumulative_balance = period_balance
        
        # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        year = 2019 + (i - 1) // 12
        month = ((i - 1) % 12) + 1
        test_date = f"{year}-{month:02d}"
        
        result = {
            'period_id': i,
            'test_start': test_date + "-01",
            'test_end': test_date + "-28",
            'market_condition': market,
            'total_return': monthly_return,
            'monthly_return': monthly_return,
            'max_drawdown': max_drawdown,
            'win_rate': win_rate,
            'total_trades': total_trades,
            'cumulative_balance': cumulative_balance,
            'profit_factor': random.gauss(1.4, 0.3) if monthly_return > 0 else random.gauss(0.8, 0.2),
            'sharpe_ratio': random.gauss(1.1, 0.4)
        }
        
        results.append(result)
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–∏–æ–¥–∞
        print(f"{i:<8} {test_date:<12} {market:<10} {monthly_return:>+6.2f}% {max_drawdown:>8.1f}% {win_rate:>8.1f}% {total_trades:>6}")
    
    return results

def analyze_results(results):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print(f"\n" + "="*60)
    print("üìä –û–ë–©–ò–ô –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í WALK FORWARD –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("="*60)
    
    # –°–æ–±–∏—Ä–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
    monthly_returns = [r['monthly_return'] for r in results]
    max_drawdowns = [r['max_drawdown'] for r in results]
    win_rates = [r['win_rate'] for r in results]
    total_trades = [r['total_trades'] for r in results]
    profit_factors = [r['profit_factor'] for r in results]
    
    # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    avg_return = sum(monthly_returns) / len(monthly_returns)
    median_return = sorted(monthly_returns)[len(monthly_returns)//2]
    std_return = (sum([(x - avg_return)**2 for x in monthly_returns]) / len(monthly_returns))**0.5
    min_return = min(monthly_returns)
    max_return = max(monthly_returns)
    
    avg_drawdown = sum(max_drawdowns) / len(max_drawdowns)
    max_max_drawdown = max(max_drawdowns)
    
    avg_win_rate = sum(win_rates) / len(win_rates)
    avg_trades = sum(total_trades) / len(total_trades)
    avg_profit_factor = sum(profit_factors) / len(profit_factors)
    
    profitable_periods = len([r for r in monthly_returns if r > 0])
    profitable_pct = profitable_periods / len(monthly_returns) * 100
    
    print(f"üìä –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–µ—Ä–∏–æ–¥–æ–≤: {len(results)}")
    print(f"üìà –°—Ä–µ–¥–Ω—è—è –º–µ—Å—è—á–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {avg_return:.2f}%")
    print(f"üìà –ú–µ–¥–∏–∞–Ω–Ω–∞—è –º–µ—Å—è—á–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {median_return:.2f}%") 
    print(f"üìà –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏: {std_return:.2f}%")
    print(f"üìà –î–∏–∞–ø–∞–∑–æ–Ω –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏: {min_return:.2f}% - {max_return:.2f}%")
    print(f"üìâ –°—Ä–µ–¥–Ω—è—è –º–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞: {avg_drawdown:.2f}%")
    print(f"üìâ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: {max_max_drawdown:.2f}%")
    print(f"üéØ –°—Ä–µ–¥–Ω–∏–π Win Rate: {avg_win_rate:.1f}%")
    print(f"üí∞ –°—Ä–µ–¥–Ω–∏–π Profit Factor: {avg_profit_factor:.2f}")
    print(f"üîÑ –°—Ä–µ–¥–Ω–µ —Å–¥–µ–ª–æ–∫ –∑–∞ –ø–µ—Ä–∏–æ–¥: {avg_trades:.0f}")
    print(f"‚úÖ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤: {profitable_periods} ({profitable_pct:.1f}%)")
    
    # –ì–æ–¥–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    annual_return = avg_return * 12
    annual_volatility = std_return * (12**0.5)
    
    print(f"\nüìÖ –ì–û–î–û–í–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:")
    print(f"üìà –û–∂–∏–¥–∞–µ–º–∞—è –≥–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {annual_return:.1f}%")
    print(f"üìä –ì–æ–¥–æ–≤–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {annual_volatility:.1f}%")
    
    if annual_volatility > 0:
        risk_adj_return = annual_return / annual_volatility
        print(f"üìä –†–∏—Å–∫-—Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {risk_adj_return:.2f}")
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Ä—ã–Ω–∫–æ–º
    print(f"\nüèÜ –°–†–ê–í–ù–ï–ù–ò–ï –° –†–´–ù–ö–û–ú:")
    sp500_annual = 10
    btc_annual = 50
    
    print(f"üìä –ù–∞—à–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {annual_return:.1f}% –≥–æ–¥–æ–≤—ã—Ö")
    print(f"üìä S&P 500: ~{sp500_annual}% –≥–æ–¥–æ–≤—ã—Ö ({'–ø—Ä–µ–≤–æ—Å—Ö–æ–¥–∏–º' if annual_return > sp500_annual else '—É—Å—Ç—É–ø–∞–µ–º'} –≤ {abs(annual_return/sp500_annual):.1f}x —Ä–∞–∑)")
    print(f"üìä Bitcoin: ~{btc_annual}% –≥–æ–¥–æ–≤—ã—Ö ({'–ø—Ä–µ–≤–æ—Å—Ö–æ–¥–∏–º' if annual_return > btc_annual else '—É—Å—Ç—É–ø–∞–µ–º'} –≤ {abs(annual_return/btc_annual):.1f}x —Ä–∞–∑)")
    
    # –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if avg_return != 0:
        consistency_score = profitable_pct * (1 - std_return / abs(avg_return))
    else:
        consistency_score = 0
        
    print(f"\nüéØ –û–¶–ï–ù–ö–ê –°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–ò:")
    print(f"üìä –ò–Ω–¥–µ–∫—Å —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏: {consistency_score:.1f}/100")
    
    if consistency_score > 70:
        print("‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã—Å–æ–∫—É—é —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å")
        assessment = "–û–¢–õ–ò–ß–ù–û"
    elif consistency_score > 50:
        print("üü° –°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–º–µ—Ä–µ–Ω–Ω—É—é —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å") 
        assessment = "–•–û–†–û–®–û"
    else:
        print("‚ùå –°—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–∞")
        assessment = "–¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò"
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
    final_balance = results[-1]['cumulative_balance']
    total_growth = (final_balance - 10000) / 10000 * 100
    
    print(f"\nüí∞ –§–ò–ù–ê–ù–°–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"üè¶ –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: $10,000")
    print(f"üè¶ –§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${final_balance:,.0f}")
    print(f"üìà –û–±—â–∏–π –ø—Ä–∏—Ä–æ—Å—Ç: {total_growth:.1f}%")
    print(f"üíé –°—Ä–µ–¥–Ω–µ–≥–æ–¥–æ–≤–æ–π –ø—Ä–∏—Ä–æ—Å—Ç: {(final_balance/10000)**(12/len(results)) - 1:.1%}")
    
    # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
    print(f"\nüéì –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê: {assessment}")
    
    if assessment == "–û–¢–õ–ò–ß–ù–û":
        print("üöÄ –°—Ç—Ä–∞—Ç–µ–≥–∏—è –≥–æ—Ç–æ–≤–∞ –∫ —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ!")
        print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: –Ω–∞—á–Ω–∏—Ç–µ —Å –Ω–µ–±–æ–ª—å—à–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
    elif assessment == "–•–û–†–û–®–û":
        print("üîß –°—Ç—Ä–∞—Ç–µ–≥–∏—è –∏–º–µ–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
        print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏")
    else:
        print("‚ö†Ô∏è –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ç—Ä–µ–±—É–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–π –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
        print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∏—Ç–µ –ª–æ–≥–∏–∫—É –≤—Ö–æ–¥–æ–≤ –∏ –≤—ã—Ö–æ–¥–æ–≤")
    
    return {
        'avg_monthly_return': avg_return,
        'volatility': std_return,
        'profitable_periods_pct': profitable_pct,
        'max_drawdown': max_max_drawdown,
        'annual_return': annual_return,
        'consistency_score': consistency_score,
        'assessment': assessment
    }

def save_results(results, analysis):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª—ã"""
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    with open('simulated_walk_forward_results.json', 'w') as f:
        json.dump(results, f, indent=2, default=str)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
    with open('simulated_analysis.json', 'w') as f:
        json.dump(analysis, f, indent=2)
    
    # –°–æ–∑–¥–∞–µ–º CSV-–ø–æ–¥–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç
    with open('simulated_summary.txt', 'w') as f:
        f.write("Period,Test_Start,Test_End,Market,Monthly_Return_%,Max_Drawdown_%,Win_Rate_%,Total_Trades\n")
        for r in results:
            f.write(f"{r['period_id']},{r['test_start']},{r['test_end']},{r['market_condition']},{r['monthly_return']:.2f},{r['max_drawdown']:.1f},{r['win_rate']:.1f},{r['total_trades']}\n")
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª—ã:")
    print(f"   ‚Ä¢ simulated_walk_forward_results.json - –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
    print(f"   ‚Ä¢ simulated_analysis.json - –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑")
    print(f"   ‚Ä¢ simulated_summary.txt - –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∏–º—É–ª—è—Ü–∏–∏"""
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º seed –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
    random.seed(42)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    results = generate_realistic_results()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    analysis = analyze_results(results)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    save_results(results, analysis)
    
    print(f"\nüéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
    print(f"–î–∞–Ω–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –º–æ–≥—É—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ")
    print(f"—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã walk forward —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ETH —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.")
    print(f"")
    print(f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç–æ—è—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
    print(f"1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install pandas numpy matplotlib seaborn")
    print(f"2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python3 run_walk_forward.py")

if __name__ == "__main__":
    main()