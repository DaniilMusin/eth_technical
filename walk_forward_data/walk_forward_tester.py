#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üöÄ WALK FORWARD –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï
–°–∏—Å—Ç–µ–º–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å –ø–æ–º–æ—â—å—é walk forward –∞–Ω–∞–ª–∏–∑–∞
"""

import pandas as pd
import numpy as np
import os
import sys
import warnings
import json
from datetime import datetime, timedelta
from typing import Dict, List, Tuple, Optional
import matplotlib.pyplot as plt
import seaborn as sns
from dataclasses import dataclass
import logging

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from balanced_strategy_base import BalancedAdaptiveStrategy

warnings.filterwarnings('ignore')
logging.basicConfig(level=logging.INFO)

@dataclass
class WalkForwardResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–¥–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ walk forward —Ç–µ—Å—Ç–∞"""
    period_id: int
    train_start: str
    train_end: str
    test_start: str
    test_end: str
    train_records: int
    test_records: int
    total_return: float
    monthly_return: float
    max_drawdown: float
    win_rate: float
    profit_factor: float
    sharpe_ratio: float
    total_trades: int
    best_params: Dict
    performance_metrics: Dict

class WalkForwardTester:
    """
    –°–∏—Å—Ç–µ–º–∞ Walk Forward —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    
    –ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã:
    1. –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –ø–µ—Ä–∏–æ–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 6 –º–µ—Å—è—Ü–µ–≤ –æ–±—É—á–µ–Ω–∏–µ + 1 –º–µ—Å—è—Ü —Ç–µ—Å—Ç)
    2. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞: –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º –ø–µ—Ä–∏–æ–¥–µ
    4. –°–¥–≤–∏–≥–∞–µ–º –æ–∫–Ω–æ –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º
    """
    
    def __init__(self, 
                 data_path: str,
                 output_dir: str = "walk_forward_data",
                 train_months: int = 6,
                 test_months: int = 1,
                 min_data_points: int = 5000,
                 initial_balance: float = 10000):
        """
        Args:
            data_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏
            output_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            train_months: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
            test_months: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            min_data_points: –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞
            initial_balance: –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        self.data_path = data_path
        self.output_dir = output_dir
        self.train_months = train_months
        self.test_months = test_months
        self.min_data_points = min_data_points
        self.initial_balance = initial_balance
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        os.makedirs(self.output_dir, exist_ok=True)
        os.makedirs(f"{self.output_dir}/periods", exist_ok=True)
        os.makedirs(f"{self.output_dir}/results", exist_ok=True)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        self.data = self._load_and_prepare_data()
        self.periods = self._create_periods()
        self.results: List[WalkForwardResult] = []
        
        print(f"üöÄ Walk Forward Tester –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        print(f"üìä –î–∞–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {len(self.data):,} –∑–∞–ø–∏—Å–µ–π")
        print(f"üìÖ –ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö: {self.data.index[0]} - {self.data.index[-1]}")
        print(f"üîÑ –ü–µ—Ä–∏–æ–¥–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {len(self.periods)}")
        print(f"üìà –û–±—É—á–µ–Ω–∏–µ: {self.train_months} –º–µ—Å, –¢–µ—Å—Ç: {self.test_months} –º–µ—Å")
    
    def _load_and_prepare_data(self) -> pd.DataFrame:
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ"""
        print("üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...")
        
        df = pd.read_csv(self.data_path)
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
        rename_map = {
            "open_time": "Open time",
            "open": "Open",
            "high": "High", 
            "low": "Low",
            "close": "Close",
            "volume": "Volume"
        }
        df.rename(columns=rename_map, inplace=True)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
        if df["Open time"].dtype.kind in "iu":
            df["Open time"] = pd.to_datetime(df["Open time"], unit="ms", errors="coerce")
        else:
            df["Open time"] = pd.to_datetime(df["Open time"], errors="coerce")
        
        df.dropna(subset=["Open time"], inplace=True)
        df.set_index("Open time", inplace=True)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—ã –≤ —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç
        for col in ["Open", "High", "Low", "Close", "Volume"]:
            df[col] = pd.to_numeric(df[col], errors="coerce")
        
        df.dropna(inplace=True)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        df.sort_index(inplace=True)
        
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã: {len(df):,} –∑–∞–ø–∏—Å–µ–π")
        return df
    
    def _create_periods(self) -> List[Tuple[str, str, str, str]]:
        """–°–æ–∑–¥–∞–µ–º –ø–µ—Ä–∏–æ–¥—ã –¥–ª—è walk forward —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        periods = []
        
        # –ù–∞—á–∏–Ω–∞–µ–º —Å —Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞, –∫–æ–≥–¥–∞ —É –Ω–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        start_date = self.data.index[0]
        end_date = self.data.index[-1]
        
        current_date = start_date
        period_id = 1
        
        while True:
            # –ü–µ—Ä–∏–æ–¥ –æ–±—É—á–µ–Ω–∏—è
            train_start = current_date
            train_end = train_start + pd.DateOffset(months=self.train_months)
            
            # –ü–µ—Ä–∏–æ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è  
            test_start = train_end
            test_end = test_start + pd.DateOffset(months=self.test_months)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
            if test_end > end_date:
                break
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –∫–∞–∂–¥–æ–º –ø–µ—Ä–∏–æ–¥–µ
            train_data = self.data[train_start:train_end]
            test_data = self.data[test_start:test_end] 
            
            if len(train_data) < self.min_data_points or len(test_data) < 100:
                print(f"‚ö†Ô∏è  –ü–µ—Ä–∏–æ–¥ {period_id}: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö (train: {len(train_data)}, test: {len(test_data)})")
                current_date = current_date + pd.DateOffset(months=self.test_months)
                period_id += 1
                continue
            
            periods.append((
                train_start.strftime('%Y-%m-%d %H:%M:%S'),
                train_end.strftime('%Y-%m-%d %H:%M:%S'),
                test_start.strftime('%Y-%m-%d %H:%M:%S'),
                test_end.strftime('%Y-%m-%d %H:%M:%S')
            ))
            
            # –°–¥–≤–∏–≥–∞–µ–º –æ–∫–Ω–æ
            current_date = current_date + pd.DateOffset(months=self.test_months)
            period_id += 1
        
        print(f"üîÑ –°–æ–∑–¥–∞–Ω–æ {len(periods)} –ø–µ—Ä–∏–æ–¥–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return periods
    
    def _save_period_data(self, period_id: int, train_data: pd.DataFrame, 
                         test_data: pd.DataFrame) -> Tuple[str, str]:
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–∏–æ–¥–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã"""
        train_path = f"{self.output_dir}/periods/period_{period_id:03d}_train.csv"
        test_path = f"{self.output_dir}/periods/period_{period_id:03d}_test.csv"
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É)
        def prepare_for_save(df):
            df_save = df.copy()
            df_save.reset_index(inplace=True)
            df_save.rename(columns={
                "Open time": "open_time",
                "Open": "open",
                "High": "high",
                "Low": "low", 
                "Close": "close",
                "Volume": "volume"
            }, inplace=True)
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞—Ç–Ω–æ –≤ timestamp
            df_save['open_time'] = df_save['open_time'].astype('int64') // 10**6
            return df_save
        
        prepare_for_save(train_data).to_csv(train_path, index=False)
        prepare_for_save(test_data).to_csv(test_path, index=False)
        
        return train_path, test_path
    
    def _optimize_on_training_data(self, train_path: str, period_id: int) -> Dict:
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–∞ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        print(f"üîß –ü–µ—Ä–∏–æ–¥ {period_id}: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            strategy = BalancedAdaptiveStrategy(
                data_path=train_path,
                symbol="ETH",
                initial_balance=self.initial_balance,
                max_leverage=10,
                base_risk_per_trade=0.02
            )
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            param_ranges = {
                'global_long_boost': [1.1, 1.2, 1.3, 1.4, 1.5],
                'global_short_penalty': [0.2, 0.3, 0.4, 0.5, 0.6],
                'atr_multiplier_sl': [1.5, 2.0, 2.5, 3.0],
                'atr_multiplier_tp': [4.0, 5.0, 6.0, 7.0, 8.0],
                'long_entry_threshold': [0.55, 0.60, 0.65, 0.70],
                'short_entry_threshold': [0.70, 0.75, 0.80, 0.85],
                'min_trades_interval': [4, 6, 8, 10, 12]
            }
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—É—é –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏)
            best_result = strategy.optimize_parameters(param_ranges, num_trials=30)
            
            print(f"‚úÖ –ü–µ—Ä–∏–æ–¥ {period_id}: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å, –µ—Å–ª–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å
            if best_result is not None:
                return best_result
            else:
                return {'best_params': {}, 'best_score': 0}
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤ –ø–µ—Ä–∏–æ–¥–µ {period_id}: {str(e)}")
            return {'best_params': {}, 'best_score': 0}
    
    def _test_on_forward_data(self, test_path: str, best_params: Dict, 
                             period_id: int) -> Dict:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–∞ forward –¥–∞–Ω–Ω—ã—Ö"""
        print(f"üìä –ü–µ—Ä–∏–æ–¥ {period_id}: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ forward –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            strategy = BalancedAdaptiveStrategy(
                data_path=test_path,
                symbol="ETH",
                initial_balance=self.initial_balance,
                max_leverage=10,
                base_risk_per_trade=0.02
            )
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            strategy.params.update(best_params)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±—ç–∫—Ç–µ—Å—Ç
            strategy.load_data()
            strategy._auto_scale_volatility()
            strategy.calculate_indicators()
            strategy.run_backtest()
            results = strategy.analyze_results()
            
            print(f"‚úÖ –ü–µ—Ä–∏–æ–¥ {period_id}: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å —Å –Ω—É–ª–µ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            if results is not None:
                return results
            else:
                return {
                    'total_return': 0,
                    'max_drawdown': 0,
                    'win_rate': 0,
                    'profit_factor': 0,
                    'sharpe_ratio': 0,
                    'total_trades': 0
                }
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ø–µ—Ä–∏–æ–¥–µ {period_id}: {str(e)}")
            return {
                'total_return': 0,
                'max_drawdown': 0,
                'win_rate': 0,
                'profit_factor': 0,
                'sharpe_ratio': 0,
                'total_trades': 0
            }
    
    def run_walk_forward_test(self) -> List[WalkForwardResult]:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ walk forward —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("\n" + "="*60)
        print("üöÄ –ó–ê–ü–£–°–ö WALK FORWARD –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("="*60)
        
        for i, (train_start, train_end, test_start, test_end) in enumerate(self.periods, 1):
            print(f"\nüìÖ –ü–ï–†–ò–û–î {i}/{len(self.periods)}")
            print(f"üîÑ –û–±—É—á–µ–Ω–∏–µ: {train_start} - {train_end}")
            print(f"üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {test_start} - {test_end}")
            
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞
                train_data = self.data[train_start:train_end]
                test_data = self.data[test_start:test_end]
                
                print(f"üìà –î–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è: {len(train_data):,}")
                print(f"üìâ –î–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {len(test_data):,}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–∏–æ–¥–∞
                train_path, test_path = self._save_period_data(i, train_data, test_data)
                
                # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                optimization_result = self._optimize_on_training_data(train_path, i)
                best_params = optimization_result.get('best_params', {})
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ forward –¥–∞–Ω–Ω—ã—Ö
                test_results = self._test_on_forward_data(test_path, best_params, i)
                
                # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–∏–æ–¥–∞
                monthly_return = test_results.get('monthly_return', 
                                                test_results['total_return'] / self.test_months)
                
                period_result = WalkForwardResult(
                    period_id=i,
                    train_start=train_start,
                    train_end=train_end,
                    test_start=test_start,
                    test_end=test_end,
                    train_records=len(train_data),
                    test_records=len(test_data),
                    total_return=test_results['total_return'],
                    monthly_return=monthly_return,
                    max_drawdown=test_results['max_drawdown'],
                    win_rate=test_results['win_rate'],
                    profit_factor=test_results.get('profit_factor', 0),
                    sharpe_ratio=test_results.get('sharpe_ratio', 0),
                    total_trades=test_results['total_trades'],
                    best_params=best_params,
                    performance_metrics=test_results
                )
                
                self.results.append(period_result)
                
                # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–∏–æ–¥–∞
                print(f"üí∞ –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {period_result.total_return:.2f}%")
                print(f"üìà –ú–µ—Å—è—á–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {period_result.monthly_return:.2f}%")
                print(f"üìâ –ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞: {period_result.max_drawdown:.2f}%")
                print(f"üéØ Win Rate: {period_result.win_rate:.1f}%")
                print(f"üîÑ –°–¥–µ–ª–æ–∫: {period_result.total_trades}")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–∏–æ–¥–µ {i}: {str(e)}")
                continue
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self._save_results()
        
        print(f"\n‚úÖ Walk Forward —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print(f"üìä –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–µ—Ä–∏–æ–¥–æ–≤: {len(self.results)}")
        
        return self.results
    
    def _save_results(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª—ã"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON
        results_data = []
        for result in self.results:
            results_data.append({
                'period_id': result.period_id,
                'train_start': result.train_start,
                'train_end': result.train_end,
                'test_start': result.test_start,
                'test_end': result.test_end,
                'train_records': result.train_records,
                'test_records': result.test_records,
                'total_return': result.total_return,
                'monthly_return': result.monthly_return,
                'max_drawdown': result.max_drawdown,
                'win_rate': result.win_rate,
                'profit_factor': result.profit_factor,
                'sharpe_ratio': result.sharpe_ratio,
                'total_trades': result.total_trades,
                'best_params': result.best_params,
                'performance_metrics': result.performance_metrics
            })
        
        with open(f"{self.output_dir}/results/walk_forward_results.json", 'w') as f:
            json.dump(results_data, f, indent=2, default=str)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –≤ CSV
        df_results = pd.DataFrame([
            {
                'Period': r.period_id,
                'Test_Start': r.test_start,
                'Test_End': r.test_end,
                'Total_Return_%': r.total_return,
                'Monthly_Return_%': r.monthly_return,
                'Max_Drawdown_%': r.max_drawdown,
                'Win_Rate_%': r.win_rate,
                'Profit_Factor': r.profit_factor,
                'Sharpe_Ratio': r.sharpe_ratio,
                'Total_Trades': r.total_trades
            }
            for r in self.results
        ])
        
        df_results.to_csv(f"{self.output_dir}/results/summary_results.csv", index=False)
        print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {self.output_dir}/results/")
    
    def analyze_walk_forward_results(self) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ walk forward —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if not self.results:
            print("‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return {}
        
        print("\n" + "="*60)
        print("üìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í WALK FORWARD –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("="*60)
        
        # –°–æ–±–∏—Ä–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
        monthly_returns = [r.monthly_return for r in self.results]
        total_returns = [r.total_return for r in self.results]
        max_drawdowns = [r.max_drawdown for r in self.results]
        win_rates = [r.win_rate for r in self.results]
        profit_factors = [r.profit_factor for r in self.results if r.profit_factor > 0]
        sharpe_ratios = [r.sharpe_ratio for r in self.results if not np.isnan(r.sharpe_ratio)]
        total_trades = [r.total_trades for r in self.results]
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = {
            'periods_tested': len(self.results),
            'avg_monthly_return': np.mean(monthly_returns),
            'median_monthly_return': np.median(monthly_returns),
            'std_monthly_return': np.std(monthly_returns),
            'min_monthly_return': np.min(monthly_returns),
            'max_monthly_return': np.max(monthly_returns),
            'avg_max_drawdown': np.mean(max_drawdowns),
            'max_max_drawdown': np.max(max_drawdowns),
            'avg_win_rate': np.mean(win_rates),
            'avg_profit_factor': np.mean(profit_factors) if profit_factors else 0,
            'avg_sharpe_ratio': np.mean(sharpe_ratios) if sharpe_ratios else 0,
            'total_trades_avg': np.mean(total_trades),
            'profitable_periods': len([r for r in monthly_returns if r > 0]),
            'profitable_periods_pct': len([r for r in monthly_returns if r > 0]) / len(monthly_returns) * 100
        }
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print(f"üìä –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–µ—Ä–∏–æ–¥–æ–≤: {stats['periods_tested']}")
        print(f"üìà –°—Ä–µ–¥–Ω—è—è –º–µ—Å—è—á–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {stats['avg_monthly_return']:.2f}%")
        print(f"üìà –ú–µ–¥–∏–∞–Ω–Ω–∞—è –º–µ—Å—è—á–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {stats['median_monthly_return']:.2f}%")
        print(f"üìà –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏: {stats['std_monthly_return']:.2f}%")
        print(f"üìà –î–∏–∞–ø–∞–∑–æ–Ω –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏: {stats['min_monthly_return']:.2f}% - {stats['max_monthly_return']:.2f}%")
        print(f"üìâ –°—Ä–µ–¥–Ω—è—è –º–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞: {stats['avg_max_drawdown']:.2f}%")
        print(f"üìâ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: {stats['max_max_drawdown']:.2f}%")
        print(f"üéØ –°—Ä–µ–¥–Ω–∏–π Win Rate: {stats['avg_win_rate']:.1f}%")
        print(f"üí∞ –°—Ä–µ–¥–Ω–∏–π Profit Factor: {stats['avg_profit_factor']:.2f}")
        print(f"üìä –°—Ä–µ–¥–Ω–∏–π Sharpe Ratio: {stats['avg_sharpe_ratio']:.2f}")
        print(f"‚úÖ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤: {stats['profitable_periods']} ({stats['profitable_periods_pct']:.1f}%)")
        
        # –†–∞—Å—á–µ—Ç –≥–æ–¥–æ–≤–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ —Å —É—á–µ—Ç–æ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        annual_return = stats['avg_monthly_return'] * 12
        annual_volatility = stats['std_monthly_return'] * np.sqrt(12)
        
        print(f"\nüìÖ –ì–û–î–û–í–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:")
        print(f"üìà –û–∂–∏–¥–∞–µ–º–∞—è –≥–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {annual_return:.1f}%")
        print(f"üìä –ì–æ–¥–æ–≤–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {annual_volatility:.1f}%")
        print(f"üìä –†–∏—Å–∫-—Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {annual_return/annual_volatility:.2f}")
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –±–µ–Ω—á–º–∞—Ä–∫–æ–º
        print(f"\nüèÜ –°–†–ê–í–ù–ï–ù–ò–ï –° –†–´–ù–ö–û–ú:")
        sp500_annual = 10  # –°—Ä–µ–¥–Ω—è—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å S&P 500
        btc_annual = 50   # –°—Ä–µ–¥–Ω—è—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å Bitcoin
        
        print(f"üìä –ù–∞—à–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {annual_return:.1f}% –≥–æ–¥–æ–≤—ã—Ö")
        print(f"üìä S&P 500: ~{sp500_annual}% –≥–æ–¥–æ–≤—ã—Ö ({'–ø—Ä–µ–≤–æ—Å—Ö–æ–¥–∏–º' if annual_return > sp500_annual else '—É—Å—Ç—É–ø–∞–µ–º'} –≤ {abs(annual_return/sp500_annual):.1f}x —Ä–∞–∑)")
        print(f"üìä Bitcoin: ~{btc_annual}% –≥–æ–¥–æ–≤—ã—Ö ({'–ø—Ä–µ–≤–æ—Å—Ö–æ–¥–∏–º' if annual_return > btc_annual else '—É—Å—Ç—É–ø–∞–µ–º'} –≤ {abs(annual_return/btc_annual):.1f}x —Ä–∞–∑)")
        
        # –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        consistency_score = stats['profitable_periods_pct'] * (1 - stats['std_monthly_return'] / abs(stats['avg_monthly_return']))
        print(f"\nüéØ –û–¶–ï–ù–ö–ê –°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–ò:")
        print(f"üìä –ò–Ω–¥–µ–∫—Å —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏: {consistency_score:.1f}/100")
        
        if consistency_score > 70:
            print("‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã—Å–æ–∫—É—é —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å")
        elif consistency_score > 50:
            print("üü° –°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–º–µ—Ä–µ–Ω–Ω—É—é —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å")
        else:
            print("‚ùå –°—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–∞")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
        with open(f"{self.output_dir}/results/walk_forward_analysis.json", 'w') as f:
            json.dump(stats, f, indent=2)
        
        return stats
    
    def plot_walk_forward_results(self):
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ walk forward —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if not self.results:
            print("‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤")
            return
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è
        plt.style.use('seaborn-v0_8-darkgrid')
        fig, axes = plt.subplots(2, 2, figsize=(15, 12))
        fig.suptitle('üìä Walk Forward Testing Results', fontsize=16, fontweight='bold')
        
        # –ì—Ä–∞—Ñ–∏–∫ 1: –ú–µ—Å—è—á–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
        periods = [r.period_id for r in self.results]
        monthly_returns = [r.monthly_return for r in self.results]
        
        axes[0, 0].bar(periods, monthly_returns, 
                      color=['green' if x > 0 else 'red' for x in monthly_returns],
                      alpha=0.7)
        axes[0, 0].axhline(y=0, color='black', linestyle='-', alpha=0.3)
        axes[0, 0].axhline(y=np.mean(monthly_returns), color='blue', 
                          linestyle='--', alpha=0.7, label=f'–°—Ä–µ–¥–Ω–µ–µ: {np.mean(monthly_returns):.2f}%')
        axes[0, 0].set_title('–ú–µ—Å—è—á–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º')
        axes[0, 0].set_xlabel('–ü–µ—Ä–∏–æ–¥')
        axes[0, 0].set_ylabel('–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)')
        axes[0, 0].legend()
        axes[0, 0].grid(True, alpha=0.3)
        
        # –ì—Ä–∞—Ñ–∏–∫ 2: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
        max_drawdowns = [r.max_drawdown for r in self.results]
        
        axes[0, 1].bar(periods, max_drawdowns, color='red', alpha=0.7)
        axes[0, 1].axhline(y=np.mean(max_drawdowns), color='blue', 
                          linestyle='--', alpha=0.7, label=f'–°—Ä–µ–¥–Ω–µ–µ: {np.mean(max_drawdowns):.2f}%')
        axes[0, 1].set_title('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º')
        axes[0, 1].set_xlabel('–ü–µ—Ä–∏–æ–¥')
        axes[0, 1].set_ylabel('–ü—Ä–æ—Å–∞–¥–∫–∞ (%)')
        axes[0, 1].legend()
        axes[0, 1].grid(True, alpha=0.3)
        
        # –ì—Ä–∞—Ñ–∏–∫ 3: Win Rate –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
        win_rates = [r.win_rate for r in self.results]
        
        axes[1, 0].plot(periods, win_rates, marker='o', linewidth=2, markersize=6)
        axes[1, 0].axhline(y=50, color='red', linestyle='--', alpha=0.5, label='Breakeven (50%)')
        axes[1, 0].axhline(y=np.mean(win_rates), color='blue', 
                          linestyle='--', alpha=0.7, label=f'–°—Ä–µ–¥–Ω–µ–µ: {np.mean(win_rates):.1f}%')
        axes[1, 0].set_title('Win Rate –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º')
        axes[1, 0].set_xlabel('–ü–µ—Ä–∏–æ–¥')
        axes[1, 0].set_ylabel('Win Rate (%)')
        axes[1, 0].legend()
        axes[1, 0].grid(True, alpha=0.3)
        
        # –ì—Ä–∞—Ñ–∏–∫ 4: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
        axes[1, 1].hist(monthly_returns, bins=10, alpha=0.7, color='blue', edgecolor='black')
        axes[1, 1].axvline(x=np.mean(monthly_returns), color='red', 
                          linestyle='--', alpha=0.7, label=f'–°—Ä–µ–¥–Ω–µ–µ: {np.mean(monthly_returns):.2f}%')
        axes[1, 1].axvline(x=0, color='black', linestyle='-', alpha=0.3)
        axes[1, 1].set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—è—á–Ω–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏')
        axes[1, 1].set_xlabel('–ú–µ—Å—è—á–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)')
        axes[1, 1].set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–∏–æ–¥–æ–≤')
        axes[1, 1].legend()
        axes[1, 1].grid(True, alpha=0.3)
        
        plt.tight_layout()
        plt.savefig(f"{self.output_dir}/results/walk_forward_analysis.png", dpi=300, bbox_inches='tight')
        plt.show()
        
        print(f"üìä –ì—Ä–∞—Ñ–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {self.output_dir}/results/walk_forward_analysis.png")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ walk forward —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ ETH WALK FORWARD –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï")
    print("="*50)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    data_path = "../ETHUSDT-15m-2018-2025.csv"
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–µ—Ä
    tester = WalkForwardTester(
        data_path=data_path,
        output_dir="walk_forward_data",
        train_months=6,  # 6 –º–µ—Å—è—Ü–µ–≤ –æ–±—É—á–µ–Ω–∏—è
        test_months=1,   # 1 –º–µ—Å—è—Ü —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è  
        min_data_points=5000,
        initial_balance=10000
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    results = tester.run_walk_forward_test()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    tester.analyze_walk_forward_results()
    
    # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫–∏
    tester.plot_walk_forward_results()
    
    print("\n‚úÖ Walk Forward —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ: walk_forward_data/")

if __name__ == "__main__":
    main()