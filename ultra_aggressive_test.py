#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—å—Ç—Ä–∞-–∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è 20% –≤ –º–µ—Å—è—Ü
"""

import pandas as pd
import numpy as np
from balanced_strategy_base import BalancedAdaptiveStrategy
import warnings
warnings.filterwarnings('ignore')

def test_ultra_aggressive_config(config_name, **kwargs):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–ª—å—Ç—Ä–∞-–∞–≥—Ä–µ—Å—Å–∏–≤–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    
    default_params = {
        'data_path': r"C:\programming\eth_technical\eth_technical\ETHUSDT-15m-2018-2025.csv",
        'symbol': "ETH",
        'initial_balance': 1000,
        'max_leverage': 20,
        'base_risk_per_trade': 0.04,
        'min_trades_interval': 4
    }
    
    strategy_params = kwargs.pop('strategy_params', {})
    params = {**default_params, **kwargs}
    
    print(f"\nüî• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {config_name}")
    print(f"‚ö†Ô∏è  –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {kwargs}")
    if strategy_params:
        print(f"üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy_params}")
    
    try:
        strategy = BalancedAdaptiveStrategy(**params)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        for key, value in strategy_params.items():
            strategy.params[key] = value
        
        strategy.load_data()
        strategy._auto_scale_volatility()
        strategy.calculate_indicators()
        strategy.run_backtest()
        stats = strategy.analyze_results()
        
        # –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Å—è—á–Ω—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
        monthly_return = stats.get('monthly_return', stats['total_return'] / 8.5)
        
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {stats['total_return']:.2f}% –æ–±—â–∞—è | {monthly_return:.2f}% –≤ –º–µ—Å—è—Ü")
        print(f"üìâ –ü—Ä–æ—Å–∞–¥–∫–∞: {stats['max_drawdown']:.2f}% | Sharpe: {stats['sharpe_ratio']:.2f}")
        print(f"üéØ Win Rate: {stats['win_rate']:.2f}% | –°–¥–µ–ª–æ–∫: {stats['total_trades']}")
        
        return {
            'config_name': config_name,
            'total_return': stats['total_return'],
            'monthly_return': monthly_return,
            'max_drawdown': stats['max_drawdown'],
            'sharpe_ratio': stats['sharpe_ratio'],
            'profit_factor': stats['profit_factor'],
            'win_rate': stats['win_rate'],
            'total_trades': stats['total_trades']
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ {config_name}: {e}")
        return None

def main():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É–ª—å—Ç—Ä–∞-–∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"""
    
    results = []
    
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–õ–¨–¢–†–ê-–ê–ì–†–ï–°–°–ò–í–ù–´–• –°–¢–†–ê–¢–ï–ì–ò–ô")
    print("üéØ –¶–µ–ª—å: 20% –≤ –º–µ—Å—è—Ü")
    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫!")
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è 1: –£–º–Ω–∞—è –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç—å (–≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ + —Å–µ–ª–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å)
    result = test_ultra_aggressive_config(
        "üß† –£–ú–ù–ê–Ø –ê–ì–†–ï–°–°–ò–í–ù–û–°–¢–¨",
        base_risk_per_trade=0.035,  # –£–º–µ—Ä–µ–Ω–Ω–æ –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫
        max_leverage=15,
        min_trades_interval=6,
        strategy_params={
            'global_long_boost': 1.40,
            'global_short_penalty': 0.20,  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —à–æ—Ä—Ç—ã
            'atr_multiplier_sl': 1.8,  # –ù–µ —Å–ª–∏—à–∫–æ–º —Ç–∞–π—Ç–æ–≤—ã–µ —Å—Ç–æ–ø—ã
            'atr_multiplier_tp': 5.0,  # –•–æ—Ä–æ—à–∏–µ —Ü–µ–ª–∏
            'long_entry_threshold': 0.55,  # –°–µ–ª–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            'short_entry_threshold': 0.90,  # –û—á–µ–Ω—å —Å–µ–ª–µ–∫—Ç–∏–≤–Ω—ã–µ —à–æ—Ä—Ç—ã
        }
    )
    if result: results.append(result)
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è 2: –í—ã—Å–æ–∫–æ—á–∞—Å—Ç–æ—Ç–Ω–∞—è (–±–æ–ª—å—à–µ —Å–¥–µ–ª–æ–∫)
    result = test_ultra_aggressive_config(
        "‚ö° –í–´–°–û–ö–û–ß–ê–°–¢–û–¢–ù–ê–Ø",
        base_risk_per_trade=0.025,  # –ú–µ–Ω—å—à–∏–π —Ä–∏—Å–∫, –Ω–æ –±–æ–ª—å—à–µ —Å–¥–µ–ª–æ–∫
        max_leverage=12,
        min_trades_interval=3,  # –ß–∞—â–µ —Ç–æ—Ä–≥—É–µ–º
        strategy_params={
            'global_long_boost': 1.50,
            'global_short_penalty': 0.10,
            'atr_multiplier_sl': 2.0,
            'atr_multiplier_tp': 4.0,
            'long_entry_threshold': 0.45,  # –ù–∏–∂–µ –ø–æ—Ä–æ–≥ = –±–æ–ª—å—à–µ —Å–¥–µ–ª–æ–∫
            'short_entry_threshold': 0.95,
        }
    )
    if result: results.append(result)
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è 3: –ö–æ–º–ø–∞—É–Ω–¥-—Ñ–æ–∫—É—Å (—Ç–æ–ª—å–∫–æ –ª—É—á—à–∏–µ —Å–∏–≥–Ω–∞–ª—ã, –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫)
    result = test_ultra_aggressive_config(
        "üíé –ö–û–ú–ü–ê–£–ù–î-–ü–†–ï–ú–ò–£–ú",
        base_risk_per_trade=0.045,  # –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –Ω–∞ –ª—É—á—à–∏–µ —Å–∏–≥–Ω–∞–ª—ã
        max_leverage=18,
        min_trades_interval=10,  # –†–µ–∂–µ, –Ω–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–µ–µ
        strategy_params={
            'global_long_boost': 1.60,
            'global_short_penalty': 0.05,  # –ü–æ—á—Ç–∏ —Ç–æ–ª—å–∫–æ –ª–æ–Ω–≥–∏
            'atr_multiplier_sl': 2.2,
            'atr_multiplier_tp': 6.0,  # –í—ã—Å–æ–∫–∏–µ —Ü–µ–ª–∏
            'long_entry_threshold': 0.70,  # –í—ã—Å–æ–∫–∞—è —Å–µ–ª–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            'short_entry_threshold': 0.99,  # –ë–ª–æ–∫–∏—Ä—É–µ–º —à–æ—Ä—Ç—ã
            'pyramid_min_profit': 0.008,  # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –ø–∏—Ä–∞–º–∏–¥–∏–Ω–≥
            'max_pyramid_entries': 4,
        }
    )
    if result: results.append(result)
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è 4: –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç—å
    result = test_ultra_aggressive_config(
        "‚öñÔ∏è –°–ë–ê–õ–ê–ù–°–ò–†–û–í–ê–ù–ù–ê–Ø –ê–ì–†–ï–°–°–ò–Ø",
        base_risk_per_trade=0.030,
        max_leverage=14,
        min_trades_interval=8,
        strategy_params={
            'global_long_boost': 1.35,
            'global_short_penalty': 0.30,
            'atr_multiplier_sl': 2.0,
            'atr_multiplier_tp': 5.5,
            'long_entry_threshold': 0.60,
            'short_entry_threshold': 0.80,
        }
    )
    if result: results.append(result)
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è 5: –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –ª–æ–Ω–≥–∏ (–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫ –Ω–∞ –ª–æ–Ω–≥–∏)
    result = test_ultra_aggressive_config(
        "üöÄ –õ–û–ù–ì–ò-–ú–ê–ö–°–ò–ú–£–ú",
        base_risk_per_trade=0.055,  # –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫
        max_leverage=25,
        min_trades_interval=5,
        strategy_params={
            'global_long_boost': 1.80,  # –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π –±—É—Å—Ç
            'global_short_penalty': 0.01,  # –ë–ª–æ–∫–∏—Ä—É–µ–º —à–æ—Ä—Ç—ã
            'atr_multiplier_sl': 1.5,  # –¢–∞–π—Ç–æ–≤—ã–µ —Å—Ç–æ–ø—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–ª–∞
            'atr_multiplier_tp': 4.5,
            'long_entry_threshold': 0.50,
            'short_entry_threshold': 0.99,
        }
    )
    if result: results.append(result)
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if results:
        print("\n" + "="*80)
        print("üìà –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê –£–õ–¨–¢–†–ê-–ê–ì–†–ï–°–°–ò–í–ù–´–• –°–¢–†–ê–¢–ï–ì–ò–ô")
        print("="*80)
        
        df = pd.DataFrame(results)
        df = df.sort_values('monthly_return', ascending=False)
        
        for _, row in df.iterrows():
            status = ""
            if row['monthly_return'] >= 20:
                status = "üèÜ –¶–ï–õ–¨ –î–û–°–¢–ò–ì–ù–£–¢–ê!"
            elif row['monthly_return'] >= 15:
                status = "ü•à –ë–ª–∏–∑–∫–æ –∫ —Ü–µ–ª–∏"
            elif row['monthly_return'] >= 10:
                status = "ü•â –•–æ—Ä–æ—à–æ"
            else:
                status = "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ"
                
            print(f"\n{row['config_name']}")
            print(f"  üìä –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {row['total_return']:.1f}% –æ–±—â–∞—è | {row['monthly_return']:.1f}% –≤ –º–µ—Å—è—Ü")
            print(f"  üìâ –ü—Ä–æ—Å–∞–¥–∫–∞: {row['max_drawdown']:.1f}% | Sharpe: {row['sharpe_ratio']:.2f}")
            print(f"  üéØ Win Rate: {row['win_rate']:.1f}% | –°–¥–µ–ª–æ–∫: {row['total_trades']} | {status}")
        
        # –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        best = df.iloc[0]
        print(f"\nüèÜ –õ–£–ß–®–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø: {best['config_name']}")
        print(f"üéØ –ú–µ—Å—è—á–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {best['monthly_return']:.2f}%")
        
        if best['monthly_return'] >= 20:
            print("‚úÖ –ú–ò–°–°–ò–Ø –í–´–ü–û–õ–ù–ï–ù–ê! 20%+ –≤ –º–µ—Å—è—Ü –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ!")
        else:
            print(f"üîß –ù—É–∂–Ω–æ –µ—â–µ {20 - best['monthly_return']:.2f}% –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏")
    
    return results

if __name__ == "__main__":
    results = main() 